defmodule Revrot do
  def revrot(str, sz) do
    if sz <= 0 or sz > String.length(str) do
      ""
    else
      String.graphemes(str)
      |> Enum.map(&String.to_integer(&1))
      |> Enum.chunk_every(sz, sz, :discard)
      |> Enum.map(fn arr ->
                    Enum.map(arr, &(&1 * &1 * &1))
                    |> Enum.sum()
                    |> (fn x -> rem(x, 2) == 0 end).()
                    |> if(do: Enum.reverse(arr), else: tl(arr) ++ [hd(arr)])
                    |> Enum.join
                  end)
      |> Enum.join()
    end
  end
end
