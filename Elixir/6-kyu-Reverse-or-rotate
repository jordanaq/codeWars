defmodule Revrot do
  def revrot(str, sz) do
    if sz <= 0 or sz > String.length(str) do
      ""
    else
      String.graphemes(str)
      |> Enum.map(&String.to_integer(&1))
      |> Enum.chunk_every(sz, sz, :discard)
      |> Enum.map(fn(arr)->
                    if rem(Enum.reduce(arr, 0,
                                fn(x, arr)->(x*x*x)+arr end), 2) == 0 do
                      Enum.reverse(arr)
                    else
                      [head | tail] = arr
                      tail ++ [head]
                    end
                  end)
      |> Enum.reduce("", fn(x,acc)-> acc <> Enum.reduce(x, "", &(&2 <> Integer.to_string(&1))) end)
    end
  end
  
end
